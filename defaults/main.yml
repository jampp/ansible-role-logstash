---

# Logstash version
#  The package repository is build upon major and minor versions
#
logstash_version: 5.6.4
logstash_version_repo: "{{logstash_version|regex_replace('^([0-9]+)\\..*$', '\\1')}}.x"

logstash_gpg_key: https://artifacts.elastic.co/GPG-KEY-elasticsearch

logstash_baseurl: "https://artifacts.elastic.co"
logstash_repo_baseurl: "{{logstash_baseurl}}/packages/{{logstash_version_repo}}"
logstash_package_baseurl: "{{logstash_baseurl}}/downloads/logstash"

logstash_use_repo: true

# Logstash upgrade
#  If the package is to be upgraded, (major, minor or patch release),
#  and there is a currently installed version on the system, you can
#  set this to True as an extra var.
#
logstash_upgrade: false

# Logstash user and group
#  FIXME: Currently not in use
#
logstash_owner: logstash
logstash_group: logstash

# User that will run the service
#
logstash_daemon_user: root

# Install dir (defined by the package)
#  Changing this will have no effect, as this is just a way to
#  refer to the installation directory without hardcoding things
#
logstash_install_dir: /usr/share/logstash
logstash_conf_prefix: /etc/logstash
logstash_conf_dir:    "{{logstash_conf_prefix}}/conf.d"
logstash_data_dir:    /var/lib/logstash
logstash_logs_dir:    /var/log/logstash

# Logstash JVM config
#

logstash_jvm_mem: 512m

# Logstash JVM 
#
logstash_config_jvm_defaults: |
  -Xms{{logstash_jvm_mem}}
  -Xmx{{logstash_jvm_mem}}
  -XX:+UseParNewGC
  -XX:+UseConcMarkSweepGC
  -XX:CMSInitiatingOccupancyFraction=75
  -XX:+UseCMSInitiatingOccupancyOnly
  -XX:+DisableExplicitGC
  -Djava.awt.headless=true
  -Dfile.encoding=UTF-8
  -XX:+HeapDumpOnOutOfMemoryError

logstash_config_jvm: "{{logstash_config_jvm_defaults}}"

# Logstash daemon config
#
#  logstash_config_daemon_defaults: defaults for daemon (logstash.yml)
logstash_config_daemon_defaults:
  path.data: "{{logstash_data_dir}}"
  path.config: "{{logstash_conf_dir}}"
  path.logs: "{{logstash_logs_dir}}"

#  logstash_config_daemon: dict where to specify additional daemon configs
#  that will be merged through combine() with `logstash_config_daemon_defaults`
logstash_config_daemon: {}


# input, filter and output configuration settings
#  This are vars that hold configurations to be expanded
#  on each section. They can be defined as a multiline
#  value with the YAML metachar |, i.e:
#
#   logstash_output: |
#     output {
#       codec => rubydebug
#     }
#
logstash_inputs:  ''
logstash_filters: ''
logstash_outputs: ''

# List of plugins to be installed
#
logstash_plugins:
  - logstash-input-s3
  - logstash-output-s3

logstash_log4j2_properties: |
  status = error
  name = LogstashPropertiesConfig

  appender.rolling.type = RollingFile
  appender.rolling.name = plain_rolling
  appender.rolling.fileName = "${sys:ls.logs}"/logstash-"${sys:ls.log.format}".log
  appender.rolling.filePattern = "${sys:ls.logs}"/logstash-"${sys:ls.log.format}"-%d"{yyyy-MM-dd}".log
  
  appender.rolling.policies.type = Policies
  appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
  appender.rolling.policies.time.interval = 1
  appender.rolling.policies.time.modulate = true

  appender.rolling.layout.type = PatternLayout
  appender.rolling.layout.pattern = [%d"{ISO8601}"][%-5p][%-25c] %-.10000m%n

  appender.rolling.strategy.type = DefaultRolloverStrategy
  appender.rolling.strategy.max = 7
  appender.rolling.strategy.delete.type = Delete
  appender.rolling.strategy.delete.basePath = "${sys:ls.logs}"
  appender.rolling.strategy.delete.maxDepth = 1
  appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
  # Delete files older than 7 days
  appender.rolling.strategy.delete.ifLastModified.age = 7d

  appender.json_rolling.type = RollingFile
  appender.json_rolling.name = json_rolling
  appender.json_rolling.fileName = "${sys:ls.logs}"/logstash-"${sys:ls.log.format}".log
  appender.json_rolling.filePattern = "${sys:ls.logs}"/logstash-"${sys:ls.log.format}"-%d"{yyyy-MM-dd}".log
  appender.json_rolling.policies.type = Policies
  appender.json_rolling.policies.time.type = TimeBasedTriggeringPolicy
  appender.json_rolling.policies.time.interval = 1
  appender.json_rolling.policies.time.modulate = true
  appender.json_rolling.layout.type = JSONLayout
  appender.json_rolling.layout.compact = true
  appender.json_rolling.layout.eventEol = true
  appender.json_rolling.strategy.type = DefaultRolloverStrategy
  appender.json_rolling.strategy.max = 7
  appender.json_rolling.strategy.delete.type = Delete
  appender.json_rolling.strategy.delete.basePath = "${sys:ls.logs}"
  appender.json_rolling.strategy.delete.maxDepth = 1
  appender.json_rolling.strategy.delete.ifLastModified.type = IfLastModified
  # Delete files older than 30 days
  appender.json_rolling.strategy.delete.ifLastModified.age = 7d

  # rootLogger.level = "${sys:ls.log.level}"
  rootLogger.level = debug
  rootLogger.appenderRef.rolling.ref = "${sys:ls.log.format}"_rolling


# vi:ts=2:sw=2:et:ft=yaml
